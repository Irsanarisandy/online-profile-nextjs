# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  sys: SystemInfo
  id: ID!
  form: JSON!
  values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Int!
}

type Query {
  getCollection(collection: String): Collection!
  getCollections: [Collection!]!
  node(id: String): Node!
  getDocument(collection: String, relativePath: String): DocumentNode!
  getDocumentList(before: String, after: String, first: Int, last: Int): DocumentConnection!
  getDocumentFields: JSON!
  getHomeDocument(relativePath: String): HomeDocument!
  getHomeList(before: String, after: String, first: Int, last: Int): HomeConnection!
  getAboutDocument(relativePath: String): AboutDocument!
  getAboutList(before: String, after: String, first: Int, last: Int): AboutConnection!
  getPostDocument(relativePath: String): PostDocument!
  getPostList(before: String, after: String, first: Int, last: Int): PostConnection!
}

type DocumentConnectionEdges {
  cursor: String
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String!
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Int, last: Int): DocumentConnection!
}

union DocumentNode = HomeDocument | AboutDocument | PostDocument

type Home {
  intro: [String]
}

type HomeDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Home!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type HomeConnectionEdges {
  cursor: String
  node: HomeDocument
}

type HomeConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [HomeConnectionEdges]
}

type AboutOverallWebSkills {
  name: String
  percentage: Int
  color: String
}

type About {
  title: String
  body: JSON
  overallWebSkills: [AboutOverallWebSkills]
  frontend: [String]
  backend: [String]
  generalCoding: [String]
  others: [String]
}

type AboutDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: About!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type AboutConnectionEdges {
  cursor: String
  node: AboutDocument
}

type AboutConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [AboutConnectionEdges]
}

type Post {
  title: String
  postDateTime: String
  tags: [String]
  excerpt: String
  body: JSON
}

type PostDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Post!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type PostConnectionEdges {
  cursor: String
  node: PostDocument
}

type PostConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [PostConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateHomeDocument(relativePath: String!, params: HomeMutation!): HomeDocument!
  createHomeDocument(relativePath: String!, params: HomeMutation!): HomeDocument!
  updateAboutDocument(relativePath: String!, params: AboutMutation!): AboutDocument!
  createAboutDocument(relativePath: String!, params: AboutMutation!): AboutDocument!
  updatePostDocument(relativePath: String!, params: PostMutation!): PostDocument!
  createPostDocument(relativePath: String!, params: PostMutation!): PostDocument!
}

input DocumentMutation {
  home: HomeMutation
  about: AboutMutation
  post: PostMutation
}

input HomeMutation {
  intro: [String]
}

input AboutOverallWebSkillsMutation {
  name: String
  percentage: Int
  color: String
}

input AboutMutation {
  title: String
  body: JSON
  overallWebSkills: [AboutOverallWebSkillsMutation]
  frontend: [String]
  backend: [String]
  generalCoding: [String]
  others: [String]
}

input PostMutation {
  title: String
  postDateTime: String
  tags: [String]
  excerpt: String
  body: JSON
}

schema {
  query: Query
  mutation: Mutation
}
  