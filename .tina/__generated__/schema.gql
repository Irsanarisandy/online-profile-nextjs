# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  home(relativePath: String): Home!
  homeConnection(before: String, after: String, first: Float, last: Float, sort: String): HomeConnection!
  about(relativePath: String): About!
  aboutConnection(before: String, after: String, first: Float, last: Float, sort: String): AboutConnection!
  post(relativePath: String): Post!
  postConnection(before: String, after: String, first: Float, last: Float, sort: String): PostConnection!
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String): DocumentConnection!
}

union DocumentNode = Home | About | Post

type Home implements Node & Document {
  intro: [String]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type HomeConnectionEdges {
  cursor: String!
  node: Home
}

type HomeConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [HomeConnectionEdges]
}

type AboutOverallDevSkills {
  name: String
  percentage: Float
  color: String
}

type About implements Node & Document {
  title: String
  body: JSON
  overallDevSkills: [AboutOverallDevSkills]
  frontend: [String]
  backend: [String]
  generalCoding: [String]
  others: [String]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type AboutConnectionEdges {
  cursor: String!
  node: About
}

type AboutConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [AboutConnectionEdges]
}

type Post implements Node & Document {
  title: String
  postDateTime: String
  tags: [String]
  excerpt: String
  heroImage: String
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type PostConnectionEdges {
  cursor: String!
  node: Post
}

type PostConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PostConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateHome(relativePath: String!, params: HomeMutation!): Home!
  createHome(relativePath: String!, params: HomeMutation!): Home!
  updateAbout(relativePath: String!, params: AboutMutation!): About!
  createAbout(relativePath: String!, params: AboutMutation!): About!
  updatePost(relativePath: String!, params: PostMutation!): Post!
  createPost(relativePath: String!, params: PostMutation!): Post!
}

input DocumentMutation {
  home: HomeMutation
  about: AboutMutation
  post: PostMutation
}

input HomeMutation {
  intro: [String]
}

input AboutOverallDevSkillsMutation {
  name: String
  percentage: Float
  color: String
}

input AboutMutation {
  title: String
  body: JSON
  overallDevSkills: [AboutOverallDevSkillsMutation]
  frontend: [String]
  backend: [String]
  generalCoding: [String]
  others: [String]
}

input PostMutation {
  title: String
  postDateTime: String
  tags: [String]
  excerpt: String
  heroImage: String
  body: JSON
}

schema {
  query: Query
  mutation: Mutation
}
  